import React, { useState, useRef, useEffect, useCallback } from 'react';
import { Ruler, Target, PlusCircle, PenTool, Grid, Image as ImageIcon, MinusCircle } from 'lucide-react';

const App = () => {
    const [imageSrc, setImageSrc] = useState(null);
    const [imageDimensions, setImageDimensions] = useState({ width: 0, height: 0 });
    const [unit, setUnit] = useState('imperial');
    const [pixelsPerUnit, setPixelsPerUnit] = useState(null);
    const [scalePoints, setScalePoints] = useState([]);
    const [currentTool, setCurrentTool] = useState('none');
    const [groups, setGroups] = useState([]);
    const [activeGroupId, setActiveGroupId] = useState(null);
    const [message, setMessage] = useState('');

    const canvasRef = useRef(null);
    const imgRef = useRef(null);

    const showMessage = (msg) => {
        setMessage(msg);
    };

    const handleImageLoad = (event) => {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                setImageSrc(e.target.result);
                setPixelsPerUnit(null);
                setScalePoints([]);
                setGroups([]);
                setActiveGroupId(null);
                setCurrentTool('none');
                showMessage('Image loaded successfully. Now, define the scale.');
            };
            reader.readAsDataURL(file);
        }
    };

    useEffect(() => {
        if (imgRef.current && imageSrc) {
            drawImageOnCanvas();
        }
    }, [imageSrc]);

    const drawImageOnCanvas = useCallback(() => {
        const canvas = canvasRef.current;
        const ctx = canvas?.getContext('2d');
        if (ctx && imageSrc && imgRef.current) {
            const img = imgRef.current;
            if (img.complete) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                drawVisuals(ctx, canvas);
            } else {
                img.onload = () => {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    drawVisuals(ctx, canvas);
                };
            }
        }
    }, [imageSrc, scalePoints, groups]);

    const drawVisuals = (ctx, canvas) => {
        scalePoints.forEach((p, index) => {
            ctx.beginPath();
            ctx.arc(p.x, p.y, 5, 0, 2 * Math.PI);
            ctx.fillStyle = index === 0 ? 'yellow' : 'cyan';
            ctx.fill();
            ctx.strokeStyle = 'black';
            ctx.lineWidth = 1;
            ctx.stroke();
            ctx.font = '12px Arial';
            ctx.fillStyle = 'black';
            ctx.fillText(`Scale ${index + 1}`, p.x + 8, p.y - 8);
        });

        groups.forEach(group => {
            if (group.pointOfAim) {
                ctx.beginPath();
                ctx.arc(group.pointOfAim.x, group.pointOfAim.y, 6, 0, 2 * Math.PI);
                ctx.fillStyle = 'red';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 1;
                ctx.stroke();
                ctx.font = '12px Arial';
                ctx.fillStyle = 'white';
                ctx.fillText(`POA (${group.name})`, group.pointOfAim.x + 8, group.pointOfAim.y - 8);
            }

            group.pointsOfImpact.forEach((p, index) => {
                ctx.beginPath();
                ctx.arc(p.x, p.y, 4, 0, 2 * Math.PI);
                ctx.fillStyle = 'blue';
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 1;
                ctx.stroke();
                ctx.font = '10px Arial';
                ctx.fillStyle = 'white';
                ctx.fillText(`${group.name} POI ${index + 1}`, p.x + 6, p.y - 6);
            });
        });
    };

    useEffect(() => {
        drawImageOnCanvas();
    }, [drawImageOnCanvas, scalePoints, groups, currentTool]);


    const handleCanvasClick = (event) => {
        const canvas = canvasRef.current;
        if (!canvas || !imageSrc) {
            showMessage('Please load an image first.');
            return;
        }

        const rect = canvas.getBoundingClientRect();
        const scaleX = canvas.width / rect.width;
        const scaleY = canvas.height / rect.height;

        const x = (event.clientX - rect.left) * scaleX;
        const y = (event.clientY - rect.top) * scaleY;

        switch (currentTool) {
            case 'scale_point1':
                setScalePoints([{ x, y }]);
                setCurrentTool('scale_point2');
                showMessage('Click the second point to define the scale.');
                break;
            case 'scale_point2':
                const newScalePoints = [...scalePoints, { x, y }];
                setScalePoints(newScalePoints);
                calculatePixelsPerUnit(newScalePoints);
                setCurrentTool('none');
                break;
            case 'aim_point':
                if (!activeGroupId) {
                    showMessage('Please create or select a group first.');
                    return;
                }
                setGroups(prevGroups => prevGroups.map(group =>
                    group.id === activeGroupId
                        ? { ...group, pointOfAim: { x, y } }
                        : group
                ));
                showMessage(`Point of Aim set for Group ${groups.find(g => g.id === activeGroupId)?.name || activeGroupId}.`);
                setCurrentTool('none');
                break;
            case 'impact_point':
                if (!activeGroupId) {
                    showMessage('Please create or select a group first.');
                    return;
                }
                setGroups(prevGroups => prevGroups.map(group =>
                    group.id === activeGroupId
                        ? { ...group, pointsOfImpact: [...group.pointsOfImpact, { x, y }] }
                        : group
                ));
                showMessage(`Point of Impact added to Group ${groups.find(g => g.id === activeGroupId)?.name || activeGroupId}. Click more or select another tool.`);
                break;
            default:
                break;
        }
    };

    const startDefineScale = () => {
        if (!imageSrc) {
            showMessage('Please load an image first.');
            return;
        }
        setScalePoints([]);
        setCurrentTool('scale_point1');
        showMessage('Click the first point on the image to define your scale (e.g., the ends of a known distance).');
    };

    const calculatePixelsPerUnit = (points) => {
        if (points.length === 2) {
            const p1 = points[0];
            const p2 = points[1];
            const pixelDistance = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
            const realWorldDistance = unit === 'imperial' ? 1 : 10;
            setPixelsPerUnit(pixelDistance / realWorldDistance);
            showMessage(`Scale defined: ${pixelDistance.toFixed(2)} pixels = ${realWorldDistance} ${unit === 'imperial' ? 'inch' : 'millimeters'}.`);
        }
    };

    const createNewGroup = () => {
        const newGroupId = `group-${groups.length + 1}`;
        const newGroup = {
            id: newGroupId,
            name: `Group ${groups.length + 1}`,
            pointOfAim: null,
            pointsOfImpact: []
        };
        setGroups([...groups, newGroup]);
        setActiveGroupId(newGroupId);
        showMessage(`New group "${newGroup.name}" created and selected.`);
    };

    const removeSelectedGroup = () => {
        if (!activeGroupId) {
            showMessage('No group selected to remove.');
            return;
        }

        const groupToRemove = groups.find(g => g.id === activeGroupId);
        setGroups(prevGroups => prevGroups.filter(group => group.id !== activeGroupId));
        setActiveGroupId(null);
        showMessage(`Group "${groupToRemove?.name || activeGroupId}" removed successfully.`);
        setCurrentTool('none');
    };

    const startMarkAimPoint = () => {
        if (!imageSrc) { showMessage('Please load an image first.'); return; }
        if (!activeGroupId) { showMessage('Please create or select a group first.'); return; }
        setCurrentTool('aim_point');
        showMessage('Click on the image to mark the Point of Aim for the current group.');
    };

    const startMarkImpactPoints = () => {
        if (!imageSrc) { showMessage('Please load an image first.'); return; }
        if (!activeGroupId) { showMessage('Please create or select a group first.'); return; }
        setCurrentTool('impact_point');
        showMessage('Click on the image to mark Points of Impact. Click on another tool button when done.');
    };

    const getAllCombinedImpactPoints = useCallback(() => {
        const combinedPoints = [];
        groups.forEach(group => {
            if (group.pointOfAim && group.pointsOfImpact.length > 0) {
                const poa = group.pointOfAim;
                group.pointsOfImpact.forEach(poi => {
                    combinedPoints.push({
                        x: poi.x - poa.x,
                        y: poi.y - poa.y
                    });
                });
            }
        });
        return combinedPoints;
    }, [groups]);

    const calculateStatistics = useCallback(() => {
        if (!pixelsPerUnit) {
            return "Please define the image scale first.";
        }

        const combinedImpactPoints = getAllCombinedImpactPoints();

        if (combinedImpactPoints.length === 0) {
            return "No points of impact to calculate statistics.";
        }

        const unitName = unit === 'imperial' ? 'inch' : 'mm';

        const realWorldPoints = combinedImpactPoints.map(p => ({
            x: p.x / pixelsPerUnit,
            y: p.y / pixelsPerUnit
        }));

        let pointDistancesFromAim = [];
        if (Array.isArray(realWorldPoints)) {
            pointDistancesFromAim = realWorldPoints.map(p => ({
                x: p.x.toFixed(3),
                y: p.y.toFixed(3)
            }));
        }

        const minX = Math.min(...realWorldPoints.map(p => p.x));
        const maxX = Math.max(...realWorldPoints.map(p => p.x));
        const horizontalSpread = (maxX - minX).toFixed(3);

        const minY = Math.min(...realWorldPoints.map(p => p.y));
        const maxY = Math.max(...realWorldPoints.map(p => p.y));
        const verticalSpread = (maxY - minY).toFixed(3);

        const sumX = realWorldPoints.reduce((acc, p) => acc + p.x, 0);
        const sumY = realWorldPoints.reduce((acc, p) => acc + p.y, 0);
        const mpiX = sumX / realWorldPoints.length;
        const mpiY = sumY / realWorldPoints.length;

        let totalRadius = 0;
        realWorldPoints.forEach(p => {
            const distance = Math.sqrt(
                Math.pow(p.x - mpiX, 2) +
                Math.pow(p.y - mpiY, 2)
            );
            totalRadius += distance;
        });
        const meanRadius = (totalRadius / realWorldPoints.length).toFixed(3);

        let extremeSpread = 0;
        if (realWorldPoints.length > 1) {
            for (let i = 0; i < realWorldPoints.length; i++) {
                for (let j = i + 1; j < realWorldPoints.length; j++) {
                    const dist = Math.sqrt(
                        Math.pow(realWorldPoints[i].x - realWorldPoints[j].x, 2) +
                        Math.pow(realWorldPoints[i].y - realWorldPoints[j].y, 2)
                    );
                    if (dist > extremeSpread) {
                        extremeSpread = dist;
                    }
                }
            }
        }
        extremeSpread = extremeSpread.toFixed(3);

        let output = `Combined Group Statistics (${unitName})\n\n`;

        output += `Horizontal Spread: ${horizontalSpread} ${unitName}\n`;
        output += `Vertical Spread: ${verticalSpread} ${unitName}\n`;
        output += `Extreme Spread: ${extremeSpread} ${unitName}\n`;
        output += `Mean Radius: ${meanRadius} ${unitName}\n\n`;

        output += `Individual Points of Impact (Relative to POA):\n`;
        pointDistancesFromAim.forEach((p, index) => {
            output += `  ${index + 1},${p.x},${p.y}\n`;
        });
        
        return output;
    }, [groups, pixelsPerUnit, unit, getAllCombinedImpactPoints]);

    const statsOutput = calculateStatistics();

    return (
        <div className="flex flex-col md:flex-row h-screen font-inter bg-gray-100 text-gray-800">
            <div className="w-full md:w-1/3 p-4 bg-gray-900 text-white shadow-lg flex flex-col rounded-b-lg md:rounded-r-lg md:rounded-bl-none">
                <h1 className="text-2xl font-bold mb-6 text-center text-blue-300">Group Analyzer</h1>

                <div className="mb-6 space-y-3">
                    <label htmlFor="imageUpload" className="block text-sm font-medium text-gray-300 mb-1">
                        Load Image
                    </label>
                    <div className="flex items-center space-x-2">
                        <input
                            type="file"
                            id="imageUpload"
                            accept="image/*"
                            onChange={handleImageLoad}
                            className="block w-full text-sm text-gray-200 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-500 file:text-white hover:file:bg-blue-600 transition duration-200 cursor-pointer rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        />
                    </div>
                </div>

                <div className="mb-6 space-y-3">
                    <h2 className="text-lg font-semibold text-blue-200 mb-2">Tools</h2>

                    <button
                        onClick={() => setUnit(unit === 'imperial' ? 'metric' : 'imperial')}
                        className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200"
                    >
                        <Ruler size={18} />
                        <span>Toggle Units: {unit === 'imperial' ? 'Imperial' : 'Metric'}</span>
                    </button>

                    <button
                        onClick={startDefineScale}
                        disabled={!imageSrc}
                        className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <Grid size={18} />
                        <span>Define Scale ({unit === 'imperial' ? '1 inch' : '10 mm'})</span>
                    </button>

                    <button
                        onClick={createNewGroup}
                        disabled={!imageSrc}
                        className="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <PlusCircle size={18} />
                        <span>Create New Group</span>
                    </button>

                    <button
                        onClick={removeSelectedGroup}
                        disabled={!activeGroupId || groups.length === 0}
                        className="w-full bg-red-700 hover:bg-red-800 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <MinusCircle size={18} />
                        <span>Remove Selected Group</span>
                    </button>

                    {groups.length > 0 && (
                        <div className="mb-3">
                            <label htmlFor="groupSelect" className="block text-sm font-medium text-gray-300 mb-1">
                                Active Group:
                            </label>
                            <select
                                id="groupSelect"
                                value={activeGroupId || ''}
                                onChange={(e) => setActiveGroupId(e.target.value)}
                                className="block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-white"
                            >
                                <option value="">Select a Group</option>
                                {groups.map(group => (
                                    <option key={group.id} value={group.id}>
                                        {group.name}
                                    </option>
                                ))}
                            </select>
                        </div>
                    )}

                    <button
                        onClick={startMarkAimPoint}
                        disabled={!imageSrc || !activeGroupId || !pixelsPerUnit}
                        className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <Target size={18} />
                        <span>Mark Point of Aim</span>
                    </button>

                    <button
                        onClick={startMarkImpactPoints}
                        disabled={!imageSrc || !activeGroupId || !pixelsPerUnit}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center space-x-2 shadow-md transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <PenTool size={18} />
                        <span>Mark Points of Impact</span>
                    </button>
                </div>

                <div className="mb-6 p-3 bg-gray-800 rounded-lg shadow-inner">
                    <h2 className="text-lg font-semibold text-blue-200 mb-2">Current Status</h2>
                    <p className="text-sm text-gray-300">{message}</p>
                    {pixelsPerUnit && (
                        <p className="text-sm text-gray-300 mt-2">
                            Current Scale: 1 {unit === 'imperial' ? 'inch' : 'mm'} = {(pixelsPerUnit / (unit === 'imperial' ? 1 : 10)).toFixed(2)} pixels
                        </p>
                    )}
                </div>

                <div className="flex-grow p-3 bg-gray-800 rounded-lg shadow-inner overflow-auto">
                    <h2 className="text-lg font-semibold text-blue-200 mb-2">Group Statistics</h2>
                    <pre className="text-sm text-gray-300 whitespace-pre-wrap">
                        {statsOutput}
                    </pre>
                </div>
            </div>

            <div className="flex-grow flex items-center justify-center p-4 bg-gray-200 relative overflow-hidden rounded-lg md:rounded-l-lg md:rounded-tr-none">
                {imageSrc ? (
                    <div className="relative max-w-full max-h-full flex items-center justify-center overflow-auto">
                        <img
                            ref={imgRef}
                            src={imageSrc}
                            alt="Loaded"
                            className="hidden"
                            onLoad={(e) => {
                                const img = e.target;
                                setImageDimensions({ width: img.naturalWidth, height: img.naturalHeight });
                                const canvas = canvasRef.current;
                                if (canvas) {
                                    canvas.width = img.naturalWidth;
                                    canvas.height = img.naturalHeight;
                                    drawImageOnCanvas();
                                }
                            }}
                        />
                        <canvas
                            ref={canvasRef}
                            className="border-2 border-gray-400 shadow-xl rounded-lg w-full h-full cursor-crosshair"
                            onClick={handleCanvasClick}
                        ></canvas>
                    </div>
                ) : (
                    <div className="text-center text-gray-500">
                        <ImageIcon size={64} className="mx-auto mb-4" />
                        <p className="text-xl">Load an image to get started!</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;
